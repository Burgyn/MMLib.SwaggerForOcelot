{
    "name": "Swagger contains inner reference definition.",
    "description": "Same definition has inner references.",
    "hostOverride": "",
    "routes": [
        {
            "DownstreamPathTemplate": "/api/{everything}",
            "UpstreamPathTemplate": "/api/admin/{everything}",
            "SwaggerKey": "admin"
        }
    ],
    "downstreamSwagger": {
        "x-generator": "NSwag v12.2.5.0 (NJsonSchema v9.13.37.0 (Newtonsoft.Json v12.0.0.0))",
        "swagger": "2.0",
        "info": {
            "title": "EctAdmin API",
            "description": "REST API for EctAdmin.",
            "version": "v1"
        },
        "host": "10.101.29.21:7001",
        "schemes": [
            "http"
        ],
        "paths": {
            "/api/procedure": {
                "get": {
                    "tags": [
                        "Procedure"
                    ],
                    "summary": "GET api/sample",
                    "operationId": "Procedure_Get",
                    "produces": [
                        "text/plain",
                        "application/json",
                        "text/json"
                    ],
                    "parameters": [
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        },
                        {
                            "type": "integer",
                            "name": "page",
                            "in": "query",
                            "description": "Page number"
                        },
                        {
                            "type": "integer",
                            "name": "perpage",
                            "in": "query",
                            "description": "Page size"
                        }
                    ],
                    "responses": {
                        "200": {
                            "x-nullable": true,
                            "description": "Successful operation",
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/Procedures"
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid tenant supplied"
                        },
                        "404": {
                            "description": "Settings not found"
                        }
                    }
                }
            },
            "/api/settings": {
                "get": {
                    "tags": [
                        "Settings"
                    ],
                    "summary": "Find settings for a tenant",
                    "operationId": "Settings_GetSettingsByTenant",
                    "produces": [
                        "text/plain",
                        "application/json",
                        "text/json"
                    ],
                    "parameters": [
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        }
                    ],
                    "responses": {
                        "200": {
                            "x-nullable": true,
                            "description": "Successful operation",
                            "schema": {
                                "$ref": "#/definitions/Settings"
                            }
                        },
                        "400": {
                            "description": "Invalid tenant supplied"
                        },
                        "404": {
                            "description": "Settings not found"
                        }
                    }
                },
                "post": {
                    "tags": [
                        "Settings"
                    ],
                    "summary": "Add new settings",
                    "operationId": "Settings_Post",
                    "consumes": [
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    ],
                    "produces": [
                        "text/plain",
                        "application/json",
                        "text/json"
                    ],
                    "parameters": [
                        {
                            "name": "settings",
                            "in": "body",
                            "required": true,
                            "description": "Settings object that needs to be added",
                            "schema": {
                                "$ref": "#/definitions/Settings"
                            },
                            "x-nullable": false
                        },
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        }
                    ],
                    "responses": {
                        "201": {
                            "x-nullable": true,
                            "description": "Successful creation",
                            "schema": {
                                "$ref": "#/definitions/Settings"
                            }
                        },
                        "400": {
                            "description": "Invalid tenant supplied"
                        },
                        "405": {
                            "description": "Invalid input"
                        }
                    }
                }
            },
            "/api/settings/{id}": {
                "put": {
                    "tags": [
                        "Settings"
                    ],
                    "summary": "Update existing settings",
                    "operationId": "Settings_Put",
                    "consumes": [
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    ],
                    "produces": [
                        "text/plain",
                        "application/json",
                        "text/json"
                    ],
                    "parameters": [
                        {
                            "type": "string",
                            "name": "id",
                            "in": "path",
                            "required": true,
                            "description": "Id settings that needs to be updated to the store",
                            "x-nullable": true
                        },
                        {
                            "name": "settings",
                            "in": "body",
                            "required": true,
                            "description": "Settings object that needs to be updated to the store",
                            "schema": {
                                "$ref": "#/definitions/Settings"
                            },
                            "x-nullable": false
                        },
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        }
                    ],
                    "responses": {
                        "200": {
                            "x-nullable": true,
                            "description": "Successful operation",
                            "schema": {
                                "$ref": "#/definitions/Settings"
                            }
                        },
                        "400": {
                            "description": "Invalid ID supplied"
                        },
                        "404": {
                            "description": "Pet not found"
                        },
                        "405": {
                            "description": "Validation exception"
                        }
                    }
                },
                "delete": {
                    "tags": [
                        "Settings"
                    ],
                    "summary": "Deletes settings",
                    "operationId": "Settings_DeleteSettingsByTenant",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "id",
                            "in": "path",
                            "required": true,
                            "description": "Id settings that needs to be deleted to the store",
                            "x-nullable": true
                        },
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        }
                    ],
                    "responses": {
                        "204": {
                            "description": "Delete successful"
                        },
                        "400": {
                            "description": "Invalid tenant supplied"
                        },
                        "404": {
                            "description": "Settings not found"
                        }
                    }
                }
            },
            "/api/texts": {
                "get": {
                    "tags": [
                        "Texts"
                    ],
                    "summary": "Find texts by tenant",
                    "description": "Returns texts for a tenant",
                    "operationId": "Texts_GetTextsByTenant",
                    "produces": [
                        "text/plain",
                        "application/json",
                        "text/json"
                    ],
                    "parameters": [
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        }
                    ],
                    "responses": {
                        "200": {
                            "x-nullable": true,
                            "description": "successful operation",
                            "schema": {
                                "$ref": "#/definitions/Texts"
                            }
                        },
                        "400": {
                            "description": "Invalid tenant supplied"
                        },
                        "404": {
                            "description": "settings not found"
                        }
                    }
                },
                "post": {
                    "tags": [
                        "Texts"
                    ],
                    "summary": "Add new texts",
                    "operationId": "Texts_Post",
                    "consumes": [
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    ],
                    "produces": [
                        "text/plain",
                        "application/json",
                        "text/json"
                    ],
                    "parameters": [
                        {
                            "name": "texts",
                            "in": "body",
                            "required": true,
                            "description": "Texts object that needs to be added",
                            "schema": {
                                "$ref": "#/definitions/Texts"
                            },
                            "x-nullable": false
                        },
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        }
                    ],
                    "responses": {
                        "201": {
                            "x-nullable": true,
                            "description": "Texts created",
                            "schema": {
                                "$ref": "#/definitions/Texts"
                            }
                        },
                        "405": {
                            "description": "Invalid input"
                        }
                    }
                }
            },
            "/api/texts/{type}": {
                "get": {
                    "tags": [
                        "Texts"
                    ],
                    "summary": "Find texts by type",
                    "description": "Returns texts for a tenant and type",
                    "operationId": "Texts_GetTextsByTenantAndType",
                    "produces": [
                        "text/plain",
                        "application/json",
                        "text/json"
                    ],
                    "parameters": [
                        {
                            "type": "string",
                            "name": "type",
                            "in": "path",
                            "required": true,
                            "description": "Type for texts to return",
                            "x-schema": {
                                "$ref": "#/definitions/TypeTexts"
                            },
                            "x-nullable": false,
                            "enum": [
                                "legalNotice",
                                "about"
                            ]
                        },
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        }
                    ],
                    "responses": {
                        "200": {
                            "x-nullable": true,
                            "description": "successful operation",
                            "schema": {
                                "$ref": "#/definitions/Texts"
                            }
                        },
                        "400": {
                            "description": "Invalid tenant supplied"
                        },
                        "404": {
                            "description": "settings not found"
                        }
                    }
                }
            },
            "/api/texts/{id}": {
                "put": {
                    "tags": [
                        "Texts"
                    ],
                    "summary": "Update existing texts",
                    "operationId": "Texts_Put",
                    "consumes": [
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    ],
                    "produces": [
                        "text/plain",
                        "application/json",
                        "text/json"
                    ],
                    "parameters": [
                        {
                            "type": "string",
                            "name": "id",
                            "in": "path",
                            "required": true,
                            "description": "Id of the texts that needs to be updates to the store",
                            "x-nullable": true
                        },
                        {
                            "name": "texts",
                            "in": "body",
                            "required": true,
                            "description": "Texts object that needs to be updated to the store",
                            "schema": {
                                "$ref": "#/definitions/Texts"
                            },
                            "x-nullable": false
                        },
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        }
                    ],
                    "responses": {
                        "200": {
                            "x-nullable": true,
                            "description": "Texts updated",
                            "schema": {
                                "$ref": "#/definitions/Texts"
                            }
                        },
                        "400": {
                            "description": "Invalid ID supplied"
                        },
                        "404": {
                            "description": "Texts not found"
                        },
                        "405": {
                            "description": "Validation exception"
                        }
                    }
                },
                "delete": {
                    "tags": [
                        "Texts"
                    ],
                    "summary": "Delete texts",
                    "operationId": "Texts_DeleteSettingsByTenant",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "id",
                            "in": "path",
                            "required": true,
                            "description": "Id of the settings that needs to be deleted to the store",
                            "x-nullable": true
                        },
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        }
                    ],
                    "responses": {
                        "204": {
                            "description": "Texts deleted"
                        },
                        "400": {
                            "description": "Invalid tenant supplied"
                        },
                        "404": {
                            "description": "Texts not found"
                        }
                    }
                }
            }
        },
        "definitions": {
            "Procedures": {
                "type": "object",
                "description": "Procedures",
                "additionalProperties": false,
                "required": [
                    "procedure",
                    "idProcedure",
                    "sousProcedure",
                    "idSousProcedure",
                    "newProcedure",
                    "scoring",
                    "typeProcedure"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "GUID"
                    },
                    "procedure": {
                        "type": "string",
                        "description": "Procedure",
                        "minLength": 1
                    },
                    "idProcedure": {
                        "type": "integer",
                        "description": "Id procedure",
                        "format": "int32"
                    },
                    "sousProcedure": {
                        "type": "string",
                        "description": "Get or set the type of sous-procedure",
                        "minLength": 1
                    },
                    "idSousProcedure": {
                        "type": "integer",
                        "description": "Id sous procedure",
                        "format": "int32"
                    },
                    "newProcedure": {
                        "type": "string",
                        "description": "Get or set the type of new procedure",
                        "minLength": 1
                    },
                    "scoring": {
                        "type": "integer",
                        "description": "Scoring",
                        "format": "int32"
                    },
                    "typeProcedure": {
                        "description": "TypeProcedure",
                        "minLength": 1,
                        "allOf": [
                            {
                                "$ref": "#/definitions/TypeProcedure"
                            }
                        ]
                    }
                }
            },
            "TypeProcedure": {
                "type": "string",
                "description": "Enum type procedure",
                "x-enumNames": [
                    "Aucun",
                    "Privative",
                    "Commune",
                    "All"
                ],
                "enum": [
                    "Aucun",
                    "Privative",
                    "Commune",
                    "All"
                ]
            },
            "Settings": {
                "type": "object",
                "description": "Settings",
                "additionalProperties": false,
                "required": [
                    "colors",
                    "images"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Read only Id"
                    },
                    "colors": {
                        "type": "array",
                        "description": "List colors",
                        "items": {
                            "$ref": "#/definitions/Color"
                        }
                    },
                    "images": {
                        "type": "array",
                        "description": "List images",
                        "items": {
                            "$ref": "#/definitions/Image"
                        }
                    }
                }
            },
            "Color": {
                "type": "object",
                "description": "Color",
                "additionalProperties": false,
                "required": [
                    "typeColors",
                    "value"
                ],
                "properties": {
                    "typeColors": {
                        "description": "Gets or Sets the type of color",
                        "minLength": 1,
                        "allOf": [
                            {
                                "$ref": "#/definitions/TypeColors"
                            }
                        ]
                    },
                    "value": {
                        "type": "string",
                        "description": "Gets or Sets the color's value",
                        "minLength": 1
                    }
                }
            },
            "TypeColors": {
                "type": "string",
                "description": "Enum type colors",
                "x-enumNames": [
                    "Color1Enum",
                    "Color2Enum",
                    "Color3Enum",
                    "Color4Enum",
                    "Color5Enum"
                ],
                "enum": [
                    "color1",
                    "color2",
                    "color3",
                    "color4",
                    "color5"
                ]
            },
            "Image": {
                "type": "object",
                "description": "Image",
                "additionalProperties": false,
                "required": [
                    "typeImages",
                    "imageData"
                ],
                "properties": {
                    "typeImages": {
                        "description": "Type images",
                        "minLength": 1,
                        "allOf": [
                            {
                                "$ref": "#/definitions/TypeImages"
                            }
                        ]
                    },
                    "imageData": {
                        "type": "string",
                        "description": "Image data",
                        "minLength": 1
                    }
                }
            },
            "TypeImages": {
                "type": "string",
                "description": "Enum type images",
                "x-enumNames": [
                    "LogoEnum",
                    "FaviconEnum"
                ],
                "enum": [
                    "logo",
                    "favicon"
                ]
            },
            "Texts": {
                "type": "object",
                "description": "Texts",
                "additionalProperties": false,
                "required": [
                    "textData",
                    "typeTexts",
                    "typeFormats"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id"
                    },
                    "textData": {
                        "type": "string",
                        "description": "Text data",
                        "minLength": 1
                    },
                    "typeTexts": {
                        "description": "Type texts",
                        "minLength": 1,
                        "allOf": [
                            {
                                "$ref": "#/definitions/TypeTexts"
                            }
                        ]
                    },
                    "typeFormats": {
                        "description": "Type formats",
                        "minLength": 1,
                        "allOf": [
                            {
                                "$ref": "#/definitions/TypeFormats"
                            }
                        ]
                    }
                }
            },
            "TypeTexts": {
                "type": "string",
                "description": "Enum type texts",
                "x-enumNames": [
                    "LegalNotice",
                    "About"
                ],
                "enum": [
                    "legalNotice",
                    "about"
                ]
            },
            "TypeFormats": {
                "type": "string",
                "description": "Enum type formats",
                "x-enumNames": [
                    "HtmlEnum",
                    "MarkdownEnum",
                    "AsciidocEnum"
                ],
                "enum": [
                    "html",
                    "markdown",
                    "asciidoc"
                ]
            }
        }
    },
    "expectedTransformedSwagger": {
        "x-generator": "NSwag v12.2.5.0 (NJsonSchema v9.13.37.0 (Newtonsoft.Json v12.0.0.0))",
        "swagger": "2.0",
        "info": {
            "title": "EctAdmin API",
            "description": "REST API for EctAdmin.",
            "version": "v1"
        },
        "paths": {
            "/api/admin/procedure": {
                "get": {
                    "tags": [
                        "Procedure"
                    ],
                    "summary": "GET api/sample",
                    "operationId": "Procedure_Get",
                    "produces": [
                        "text/plain",
                        "application/json",
                        "text/json"
                    ],
                    "parameters": [
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        },
                        {
                            "type": "integer",
                            "name": "page",
                            "in": "query",
                            "description": "Page number"
                        },
                        {
                            "type": "integer",
                            "name": "perpage",
                            "in": "query",
                            "description": "Page size"
                        }
                    ],
                    "responses": {
                        "200": {
                            "x-nullable": true,
                            "description": "Successful operation",
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/Procedures"
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid tenant supplied"
                        },
                        "404": {
                            "description": "Settings not found"
                        }
                    }
                }
            },
            "/api/admin/settings": {
                "get": {
                    "tags": [
                        "Settings"
                    ],
                    "summary": "Find settings for a tenant",
                    "operationId": "Settings_GetSettingsByTenant",
                    "produces": [
                        "text/plain",
                        "application/json",
                        "text/json"
                    ],
                    "parameters": [
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        }
                    ],
                    "responses": {
                        "200": {
                            "x-nullable": true,
                            "description": "Successful operation",
                            "schema": {
                                "$ref": "#/definitions/Settings"
                            }
                        },
                        "400": {
                            "description": "Invalid tenant supplied"
                        },
                        "404": {
                            "description": "Settings not found"
                        }
                    }
                },
                "post": {
                    "tags": [
                        "Settings"
                    ],
                    "summary": "Add new settings",
                    "operationId": "Settings_Post",
                    "consumes": [
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    ],
                    "produces": [
                        "text/plain",
                        "application/json",
                        "text/json"
                    ],
                    "parameters": [
                        {
                            "name": "settings",
                            "in": "body",
                            "required": true,
                            "description": "Settings object that needs to be added",
                            "schema": {
                                "$ref": "#/definitions/Settings"
                            },
                            "x-nullable": false
                        },
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        }
                    ],
                    "responses": {
                        "201": {
                            "x-nullable": true,
                            "description": "Successful creation",
                            "schema": {
                                "$ref": "#/definitions/Settings"
                            }
                        },
                        "400": {
                            "description": "Invalid tenant supplied"
                        },
                        "405": {
                            "description": "Invalid input"
                        }
                    }
                }
            },
            "/api/admin/settings/{id}": {
                "put": {
                    "tags": [
                        "Settings"
                    ],
                    "summary": "Update existing settings",
                    "operationId": "Settings_Put",
                    "consumes": [
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    ],
                    "produces": [
                        "text/plain",
                        "application/json",
                        "text/json"
                    ],
                    "parameters": [
                        {
                            "type": "string",
                            "name": "id",
                            "in": "path",
                            "required": true,
                            "description": "Id settings that needs to be updated to the store",
                            "x-nullable": true
                        },
                        {
                            "name": "settings",
                            "in": "body",
                            "required": true,
                            "description": "Settings object that needs to be updated to the store",
                            "schema": {
                                "$ref": "#/definitions/Settings"
                            },
                            "x-nullable": false
                        },
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        }
                    ],
                    "responses": {
                        "200": {
                            "x-nullable": true,
                            "description": "Successful operation",
                            "schema": {
                                "$ref": "#/definitions/Settings"
                            }
                        },
                        "400": {
                            "description": "Invalid ID supplied"
                        },
                        "404": {
                            "description": "Pet not found"
                        },
                        "405": {
                            "description": "Validation exception"
                        }
                    }
                },
                "delete": {
                    "tags": [
                        "Settings"
                    ],
                    "summary": "Deletes settings",
                    "operationId": "Settings_DeleteSettingsByTenant",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "id",
                            "in": "path",
                            "required": true,
                            "description": "Id settings that needs to be deleted to the store",
                            "x-nullable": true
                        },
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        }
                    ],
                    "responses": {
                        "204": {
                            "description": "Delete successful"
                        },
                        "400": {
                            "description": "Invalid tenant supplied"
                        },
                        "404": {
                            "description": "Settings not found"
                        }
                    }
                }
            },
            "/api/admin/texts": {
                "get": {
                    "tags": [
                        "Texts"
                    ],
                    "summary": "Find texts by tenant",
                    "description": "Returns texts for a tenant",
                    "operationId": "Texts_GetTextsByTenant",
                    "produces": [
                        "text/plain",
                        "application/json",
                        "text/json"
                    ],
                    "parameters": [
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        }
                    ],
                    "responses": {
                        "200": {
                            "x-nullable": true,
                            "description": "successful operation",
                            "schema": {
                                "$ref": "#/definitions/Texts"
                            }
                        },
                        "400": {
                            "description": "Invalid tenant supplied"
                        },
                        "404": {
                            "description": "settings not found"
                        }
                    }
                },
                "post": {
                    "tags": [
                        "Texts"
                    ],
                    "summary": "Add new texts",
                    "operationId": "Texts_Post",
                    "consumes": [
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    ],
                    "produces": [
                        "text/plain",
                        "application/json",
                        "text/json"
                    ],
                    "parameters": [
                        {
                            "name": "texts",
                            "in": "body",
                            "required": true,
                            "description": "Texts object that needs to be added",
                            "schema": {
                                "$ref": "#/definitions/Texts"
                            },
                            "x-nullable": false
                        },
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        }
                    ],
                    "responses": {
                        "201": {
                            "x-nullable": true,
                            "description": "Texts created",
                            "schema": {
                                "$ref": "#/definitions/Texts"
                            }
                        },
                        "405": {
                            "description": "Invalid input"
                        }
                    }
                }
            },
            "/api/admin/texts/{type}": {
                "get": {
                    "tags": [
                        "Texts"
                    ],
                    "summary": "Find texts by type",
                    "description": "Returns texts for a tenant and type",
                    "operationId": "Texts_GetTextsByTenantAndType",
                    "produces": [
                        "text/plain",
                        "application/json",
                        "text/json"
                    ],
                    "parameters": [
                        {
                            "type": "string",
                            "name": "type",
                            "in": "path",
                            "required": true,
                            "description": "Type for texts to return",
                            "x-schema": {
                                "$ref": "#/definitions/TypeTexts"
                            },
                            "x-nullable": false,
                            "enum": [
                                "legalNotice",
                                "about"
                            ]
                        },
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        }
                    ],
                    "responses": {
                        "200": {
                            "x-nullable": true,
                            "description": "successful operation",
                            "schema": {
                                "$ref": "#/definitions/Texts"
                            }
                        },
                        "400": {
                            "description": "Invalid tenant supplied"
                        },
                        "404": {
                            "description": "settings not found"
                        }
                    }
                }
            },
            "/api/admin/texts/{id}": {
                "put": {
                    "tags": [
                        "Texts"
                    ],
                    "summary": "Update existing texts",
                    "operationId": "Texts_Put",
                    "consumes": [
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    ],
                    "produces": [
                        "text/plain",
                        "application/json",
                        "text/json"
                    ],
                    "parameters": [
                        {
                            "type": "string",
                            "name": "id",
                            "in": "path",
                            "required": true,
                            "description": "Id of the texts that needs to be updates to the store",
                            "x-nullable": true
                        },
                        {
                            "name": "texts",
                            "in": "body",
                            "required": true,
                            "description": "Texts object that needs to be updated to the store",
                            "schema": {
                                "$ref": "#/definitions/Texts"
                            },
                            "x-nullable": false
                        },
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        }
                    ],
                    "responses": {
                        "200": {
                            "x-nullable": true,
                            "description": "Texts updated",
                            "schema": {
                                "$ref": "#/definitions/Texts"
                            }
                        },
                        "400": {
                            "description": "Invalid ID supplied"
                        },
                        "404": {
                            "description": "Texts not found"
                        },
                        "405": {
                            "description": "Validation exception"
                        }
                    }
                },
                "delete": {
                    "tags": [
                        "Texts"
                    ],
                    "summary": "Delete texts",
                    "operationId": "Texts_DeleteSettingsByTenant",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "id",
                            "in": "path",
                            "required": true,
                            "description": "Id of the settings that needs to be deleted to the store",
                            "x-nullable": true
                        },
                        {
                            "type": "string",
                            "name": "tenant",
                            "in": "header",
                            "required": true,
                            "description": "Tenant"
                        }
                    ],
                    "responses": {
                        "204": {
                            "description": "Texts deleted"
                        },
                        "400": {
                            "description": "Invalid tenant supplied"
                        },
                        "404": {
                            "description": "Texts not found"
                        }
                    }
                }
            }
        },
        "definitions": {
            "Procedures": {
                "type": "object",
                "description": "Procedures",
                "additionalProperties": false,
                "required": [
                    "procedure",
                    "idProcedure",
                    "sousProcedure",
                    "idSousProcedure",
                    "newProcedure",
                    "scoring",
                    "typeProcedure"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "GUID"
                    },
                    "procedure": {
                        "type": "string",
                        "description": "Procedure",
                        "minLength": 1
                    },
                    "idProcedure": {
                        "type": "integer",
                        "description": "Id procedure",
                        "format": "int32"
                    },
                    "sousProcedure": {
                        "type": "string",
                        "description": "Get or set the type of sous-procedure",
                        "minLength": 1
                    },
                    "idSousProcedure": {
                        "type": "integer",
                        "description": "Id sous procedure",
                        "format": "int32"
                    },
                    "newProcedure": {
                        "type": "string",
                        "description": "Get or set the type of new procedure",
                        "minLength": 1
                    },
                    "scoring": {
                        "type": "integer",
                        "description": "Scoring",
                        "format": "int32"
                    },
                    "typeProcedure": {
                        "description": "TypeProcedure",
                        "minLength": 1,
                        "allOf": [
                            {
                                "$ref": "#/definitions/TypeProcedure"
                            }
                        ]
                    }
                }
            },
            "TypeProcedure": {
                "type": "string",
                "description": "Enum type procedure",
                "x-enumNames": [
                    "Aucun",
                    "Privative",
                    "Commune",
                    "All"
                ],
                "enum": [
                    "Aucun",
                    "Privative",
                    "Commune",
                    "All"
                ]
            },
            "Settings": {
                "type": "object",
                "description": "Settings",
                "additionalProperties": false,
                "required": [
                    "colors",
                    "images"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Read only Id"
                    },
                    "colors": {
                        "type": "array",
                        "description": "List colors",
                        "items": {
                            "$ref": "#/definitions/Color"
                        }
                    },
                    "images": {
                        "type": "array",
                        "description": "List images",
                        "items": {
                            "$ref": "#/definitions/Image"
                        }
                    }
                }
            },
            "Color": {
                "type": "object",
                "description": "Color",
                "additionalProperties": false,
                "required": [
                    "typeColors",
                    "value"
                ],
                "properties": {
                    "typeColors": {
                        "description": "Gets or Sets the type of color",
                        "minLength": 1,
                        "allOf": [
                            {
                                "$ref": "#/definitions/TypeColors"
                            }
                        ]
                    },
                    "value": {
                        "type": "string",
                        "description": "Gets or Sets the color's value",
                        "minLength": 1
                    }
                }
            },
            "TypeColors": {
                "type": "string",
                "description": "Enum type colors",
                "x-enumNames": [
                    "Color1Enum",
                    "Color2Enum",
                    "Color3Enum",
                    "Color4Enum",
                    "Color5Enum"
                ],
                "enum": [
                    "color1",
                    "color2",
                    "color3",
                    "color4",
                    "color5"
                ]
            },
            "Image": {
                "type": "object",
                "description": "Image",
                "additionalProperties": false,
                "required": [
                    "typeImages",
                    "imageData"
                ],
                "properties": {
                    "typeImages": {
                        "description": "Type images",
                        "minLength": 1,
                        "allOf": [
                            {
                                "$ref": "#/definitions/TypeImages"
                            }
                        ]
                    },
                    "imageData": {
                        "type": "string",
                        "description": "Image data",
                        "minLength": 1
                    }
                }
            },
            "TypeImages": {
                "type": "string",
                "description": "Enum type images",
                "x-enumNames": [
                    "LogoEnum",
                    "FaviconEnum"
                ],
                "enum": [
                    "logo",
                    "favicon"
                ]
            },
            "Texts": {
                "type": "object",
                "description": "Texts",
                "additionalProperties": false,
                "required": [
                    "textData",
                    "typeTexts",
                    "typeFormats"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id"
                    },
                    "textData": {
                        "type": "string",
                        "description": "Text data",
                        "minLength": 1
                    },
                    "typeTexts": {
                        "description": "Type texts",
                        "minLength": 1,
                        "allOf": [
                            {
                                "$ref": "#/definitions/TypeTexts"
                            }
                        ]
                    },
                    "typeFormats": {
                        "description": "Type formats",
                        "minLength": 1,
                        "allOf": [
                            {
                                "$ref": "#/definitions/TypeFormats"
                            }
                        ]
                    }
                }
            },
            "TypeTexts": {
                "type": "string",
                "description": "Enum type texts",
                "x-enumNames": [
                    "LegalNotice",
                    "About"
                ],
                "enum": [
                    "legalNotice",
                    "about"
                ]
            },
            "TypeFormats": {
                "type": "string",
                "description": "Enum type formats",
                "x-enumNames": [
                    "HtmlEnum",
                    "MarkdownEnum",
                    "AsciidocEnum"
                ],
                "enum": [
                    "html",
                    "markdown",
                    "asciidoc"
                ]
            }
        }
    }
}